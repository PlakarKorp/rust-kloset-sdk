// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mac {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitRequest {
    #[prost(string, tag = "1")]
    pub proto: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub config: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InitResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub config: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub config: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLocationRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLocationResponse {
    #[prost(string, tag = "1")]
    pub location: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetModeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetModeResponse {
    #[prost(int32, tag = "1")]
    pub mode: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSizeRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSizeResponse {
    #[prost(int64, tag = "1")]
    pub size: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStatesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStatesResponse {
    #[prost(message, repeated, tag = "1")]
    pub macs: ::prost::alloc::vec::Vec<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutStateRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
    #[prost(bytes = "vec", tag = "2")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutStateResponse {
    #[prost(int64, tag = "1")]
    pub bytes_written: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStateRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStateResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteStateRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteStateResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPackfilesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPackfilesResponse {
    #[prost(message, repeated, tag = "1")]
    pub macs: ::prost::alloc::vec::Vec<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutPackfileRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
    #[prost(bytes = "vec", tag = "2")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutPackfileResponse {
    #[prost(int64, tag = "1")]
    pub bytes_written: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPackfileRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPackfileResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPackfileBlobRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
    #[prost(uint64, tag = "2")]
    pub offset: u64,
    #[prost(uint32, tag = "3")]
    pub length: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPackfileBlobResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeletePackfileRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeletePackfileResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLocksRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLocksResponse {
    #[prost(message, repeated, tag = "1")]
    pub macs: ::prost::alloc::vec::Vec<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutLockRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
    #[prost(bytes = "vec", tag = "2")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutLockResponse {
    #[prost(int64, tag = "1")]
    pub bytes_written: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLockRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLockResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteLockRequest {
    #[prost(message, optional, tag = "1")]
    pub mac: ::core::option::Option<Mac>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteLockResponse {}
/// Generated client implementations.
pub mod store_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct StoreClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StoreClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StoreClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StoreClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StoreClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn init(
            &mut self,
            request: impl tonic::IntoRequest<super::InitRequest>,
        ) -> std::result::Result<tonic::Response<super::InitResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/Init");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "Init"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/Create");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "Create"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn open(
            &mut self,
            request: impl tonic::IntoRequest<super::OpenRequest>,
        ) -> std::result::Result<tonic::Response<super::OpenResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/Open");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "Open"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn close(
            &mut self,
            request: impl tonic::IntoRequest<super::CloseRequest>,
        ) -> std::result::Result<tonic::Response<super::CloseResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/Close");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "Close"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_location(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLocationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLocationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetLocation");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetLocation"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_mode(
            &mut self,
            request: impl tonic::IntoRequest<super::GetModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetModeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetMode");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetMode"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_size(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSizeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSizeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetSize");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetSize"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_states(
            &mut self,
            request: impl tonic::IntoRequest<super::GetStatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetStatesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetStates");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetStates"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put_state(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::PutStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/PutState");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "PutState"));
            self.inner.client_streaming(req, path, codec).await
        }
        pub async fn get_state(
            &mut self,
            request: impl tonic::IntoRequest<super::GetStateRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetStateResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetState");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetState"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn delete_state(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/DeleteState");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "DeleteState"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_packfiles(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPackfilesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPackfilesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetPackfiles");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetPackfiles"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put_packfile(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::PutPackfileRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::PutPackfileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/PutPackfile");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "PutPackfile"));
            self.inner.client_streaming(req, path, codec).await
        }
        pub async fn get_packfile(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPackfileRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetPackfileResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetPackfile");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetPackfile"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_packfile_blob(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPackfileBlobRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetPackfileBlobResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Store/GetPackfileBlob",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Store", "GetPackfileBlob"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn delete_packfile(
            &mut self,
            request: impl tonic::IntoRequest<super::DeletePackfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeletePackfileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/store.Store/DeletePackfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("store.Store", "DeletePackfile"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_locks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLocksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLocksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetLocks");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetLocks"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put_lock(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::PutLockRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutLockResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/PutLock");
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "PutLock"));
            self.inner.client_streaming(req, path, codec).await
        }
        pub async fn get_lock(
            &mut self,
            request: impl tonic::IntoRequest<super::GetLockRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetLockResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/GetLock");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "GetLock"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn delete_lock(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteLockRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteLockResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/store.Store/DeleteLock");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("store.Store", "DeleteLock"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod store_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with StoreServer.
    #[async_trait]
    pub trait Store: std::marker::Send + std::marker::Sync + 'static {
        async fn init(
            &self,
            request: tonic::Request<super::InitRequest>,
        ) -> std::result::Result<tonic::Response<super::InitResponse>, tonic::Status>;
        async fn create(
            &self,
            request: tonic::Request<super::CreateRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateResponse>, tonic::Status>;
        async fn open(
            &self,
            request: tonic::Request<super::OpenRequest>,
        ) -> std::result::Result<tonic::Response<super::OpenResponse>, tonic::Status>;
        async fn close(
            &self,
            request: tonic::Request<super::CloseRequest>,
        ) -> std::result::Result<tonic::Response<super::CloseResponse>, tonic::Status>;
        async fn get_location(
            &self,
            request: tonic::Request<super::GetLocationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLocationResponse>,
            tonic::Status,
        >;
        async fn get_mode(
            &self,
            request: tonic::Request<super::GetModeRequest>,
        ) -> std::result::Result<tonic::Response<super::GetModeResponse>, tonic::Status>;
        async fn get_size(
            &self,
            request: tonic::Request<super::GetSizeRequest>,
        ) -> std::result::Result<tonic::Response<super::GetSizeResponse>, tonic::Status>;
        async fn get_states(
            &self,
            request: tonic::Request<super::GetStatesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetStatesResponse>,
            tonic::Status,
        >;
        async fn put_state(
            &self,
            request: tonic::Request<tonic::Streaming<super::PutStateRequest>>,
        ) -> std::result::Result<
            tonic::Response<super::PutStateResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the GetState method.
        type GetStateStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetStateResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_state(
            &self,
            request: tonic::Request<super::GetStateRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetStateStream>, tonic::Status>;
        async fn delete_state(
            &self,
            request: tonic::Request<super::DeleteStateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteStateResponse>,
            tonic::Status,
        >;
        async fn get_packfiles(
            &self,
            request: tonic::Request<super::GetPackfilesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPackfilesResponse>,
            tonic::Status,
        >;
        async fn put_packfile(
            &self,
            request: tonic::Request<tonic::Streaming<super::PutPackfileRequest>>,
        ) -> std::result::Result<
            tonic::Response<super::PutPackfileResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the GetPackfile method.
        type GetPackfileStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetPackfileResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_packfile(
            &self,
            request: tonic::Request<super::GetPackfileRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::GetPackfileStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the GetPackfileBlob method.
        type GetPackfileBlobStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetPackfileBlobResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_packfile_blob(
            &self,
            request: tonic::Request<super::GetPackfileBlobRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::GetPackfileBlobStream>,
            tonic::Status,
        >;
        async fn delete_packfile(
            &self,
            request: tonic::Request<super::DeletePackfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeletePackfileResponse>,
            tonic::Status,
        >;
        async fn get_locks(
            &self,
            request: tonic::Request<super::GetLocksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetLocksResponse>,
            tonic::Status,
        >;
        async fn put_lock(
            &self,
            request: tonic::Request<tonic::Streaming<super::PutLockRequest>>,
        ) -> std::result::Result<tonic::Response<super::PutLockResponse>, tonic::Status>;
        /// Server streaming response type for the GetLock method.
        type GetLockStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetLockResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn get_lock(
            &self,
            request: tonic::Request<super::GetLockRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetLockStream>, tonic::Status>;
        async fn delete_lock(
            &self,
            request: tonic::Request<super::DeleteLockRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteLockResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct StoreServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> StoreServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for StoreServer<T>
    where
        T: Store,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/store.Store/Init" => {
                    #[allow(non_camel_case_types)]
                    struct InitSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::InitRequest>
                    for InitSvc<T> {
                        type Response = super::InitResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::init(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/Create" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::CreateRequest>
                    for CreateSvc<T> {
                        type Response = super::CreateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::create(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/Open" => {
                    #[allow(non_camel_case_types)]
                    struct OpenSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::OpenRequest>
                    for OpenSvc<T> {
                        type Response = super::OpenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::open(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = OpenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/Close" => {
                    #[allow(non_camel_case_types)]
                    struct CloseSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::CloseRequest>
                    for CloseSvc<T> {
                        type Response = super::CloseResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CloseRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::close(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CloseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetLocation" => {
                    #[allow(non_camel_case_types)]
                    struct GetLocationSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::GetLocationRequest>
                    for GetLocationSvc<T> {
                        type Response = super::GetLocationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLocationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_location(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLocationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetMode" => {
                    #[allow(non_camel_case_types)]
                    struct GetModeSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::GetModeRequest>
                    for GetModeSvc<T> {
                        type Response = super::GetModeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetModeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_mode(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetModeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetSize" => {
                    #[allow(non_camel_case_types)]
                    struct GetSizeSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::GetSizeRequest>
                    for GetSizeSvc<T> {
                        type Response = super::GetSizeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSizeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_size(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSizeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetStates" => {
                    #[allow(non_camel_case_types)]
                    struct GetStatesSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::GetStatesRequest>
                    for GetStatesSvc<T> {
                        type Response = super::GetStatesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetStatesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_states(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetStatesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/PutState" => {
                    #[allow(non_camel_case_types)]
                    struct PutStateSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ClientStreamingService<super::PutStateRequest>
                    for PutStateSvc<T> {
                        type Response = super::PutStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::PutStateRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::put_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetState" => {
                    #[allow(non_camel_case_types)]
                    struct GetStateSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ServerStreamingService<super::GetStateRequest>
                    for GetStateSvc<T> {
                        type Response = super::GetStateResponse;
                        type ResponseStream = T::GetStateStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/DeleteState" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteStateSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::DeleteStateRequest>
                    for DeleteStateSvc<T> {
                        type Response = super::DeleteStateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteStateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::delete_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetPackfiles" => {
                    #[allow(non_camel_case_types)]
                    struct GetPackfilesSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::UnaryService<super::GetPackfilesRequest>
                    for GetPackfilesSvc<T> {
                        type Response = super::GetPackfilesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPackfilesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_packfiles(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPackfilesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/PutPackfile" => {
                    #[allow(non_camel_case_types)]
                    struct PutPackfileSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ClientStreamingService<super::PutPackfileRequest>
                    for PutPackfileSvc<T> {
                        type Response = super::PutPackfileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::PutPackfileRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::put_packfile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutPackfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetPackfile" => {
                    #[allow(non_camel_case_types)]
                    struct GetPackfileSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ServerStreamingService<super::GetPackfileRequest>
                    for GetPackfileSvc<T> {
                        type Response = super::GetPackfileResponse;
                        type ResponseStream = T::GetPackfileStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPackfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_packfile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPackfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetPackfileBlob" => {
                    #[allow(non_camel_case_types)]
                    struct GetPackfileBlobSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ServerStreamingService<
                        super::GetPackfileBlobRequest,
                    > for GetPackfileBlobSvc<T> {
                        type Response = super::GetPackfileBlobResponse;
                        type ResponseStream = T::GetPackfileBlobStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPackfileBlobRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_packfile_blob(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPackfileBlobSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/DeletePackfile" => {
                    #[allow(non_camel_case_types)]
                    struct DeletePackfileSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::UnaryService<super::DeletePackfileRequest>
                    for DeletePackfileSvc<T> {
                        type Response = super::DeletePackfileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeletePackfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::delete_packfile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeletePackfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetLocks" => {
                    #[allow(non_camel_case_types)]
                    struct GetLocksSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::GetLocksRequest>
                    for GetLocksSvc<T> {
                        type Response = super::GetLocksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLocksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_locks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLocksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/PutLock" => {
                    #[allow(non_camel_case_types)]
                    struct PutLockSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ClientStreamingService<super::PutLockRequest>
                    for PutLockSvc<T> {
                        type Response = super::PutLockResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::PutLockRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::put_lock(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutLockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/GetLock" => {
                    #[allow(non_camel_case_types)]
                    struct GetLockSvc<T: Store>(pub Arc<T>);
                    impl<
                        T: Store,
                    > tonic::server::ServerStreamingService<super::GetLockRequest>
                    for GetLockSvc<T> {
                        type Response = super::GetLockResponse;
                        type ResponseStream = T::GetLockStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetLockRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::get_lock(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetLockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/store.Store/DeleteLock" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteLockSvc<T: Store>(pub Arc<T>);
                    impl<T: Store> tonic::server::UnaryService<super::DeleteLockRequest>
                    for DeleteLockSvc<T> {
                        type Response = super::DeleteLockResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteLockRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Store>::delete_lock(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteLockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for StoreServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "store.Store";
    impl<T> tonic::server::NamedService for StoreServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
